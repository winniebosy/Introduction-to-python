Statements in Python
A statement is a piece of ocde that provides a complete instruction for some action that python will carry out.
- CLassification of Pyhton Statements:
   -Simple Statements eg import or assignemet statements
   -Compund Statements- Statements that contain other statements. eg compound statements. Used to control whetehr the code runs, when the code runs
          and how may times the code runs.
-Control flow: the order in which statements are executed in a pience of code.


The Range Function
range is a powerful function in py. Used to proive a range of numbers. Example
  
  for side in [0, 1, 2, 3]:
    amy.forward(100)
    amy.left(90)
We can replace the list like this:

for side in range(4):
    amy.forward(100)
    amy.left(90)


CRUNCHING NUMBERS 

An expression is a piece of code that resolves to some value. Within an expression, there are operators and operands.
Operators indicate what operation is to be performed (such as addition or subtraction).
Operands are the numbers (or other values) on which we want to perform the operations.


Function
A function is named block of code that doesn't run until we tell it to run.
A function call is a statement that makes a function run; when we run a statement like this, we would say that we are "calling the function".
An argument is a value that we can pass to a function when we call it.
 
Method:
-This is a function that is associated with a particular object
-Subset of a function.
-Methods can be used to give behaviors objects. eg amy.forward(100)
- all methods are functions, but not all functions are methods.


DEFINING functions
 first line of function in python starts with def keyword, then name of the fucntion and parenthesis.

 eg def spiral():

 PARAMETERS AND ARGUMENTS
pARAMETERS- FUNCTION DEFINIIONS. variable part of the function definition.
 parameter isn't anything fancy—it's really just a variable. 
Example of parameters: def spiral(sides, turn, color, width):
Example of arguements: spiral(150, -30, "blue", 10)
Arguments are just inputs
An argument isn't anything fancy either—it's just some input that we pass to a function.

When we call a function, we pass it some inputs (usually called arguments)—and these inputs get assigned to variables that are in the definition of that function (usually called parameters).


FUNCTION SCOPE
The scope of a variable is simply the part of the code for which that variable is defined.
 variable that is defined inside a function can only be used inside of that function. We would say a variable like this has local scope or is a local variable.
 In contrast, a variable that is defined outside of a function can be used anywhere in the file (both inside of functions and outside of functions). We would say a variable like this has global scope or is a global variable.

 INDENTATION
 ndent with care!
Python uses the indentation of your code to determine its structure. For example, there's a big difference between these two blocks of code:

for side in [25, 50, 25, 50]:
    t.forward(side)
    t.right(90)
for side in [25, 50, 25, 50]:
    t.forward(side)
t.right(90)
The difference is in whether the line t.right(90) is part of the loop or not. In the first case, it is; so the turtle will draw a rectangle. In the second case, it isn't; so the turtle will just keep going forward four times and only turn right at the very end.

CONDITIONAL STATEMENTS IN Python
A conditional statement is one that that tells Python to run some code only when a certain condition is true. We can use the if keyword to create a conditional statement, like this:

if sides == 4:
    bob.color("purple")
The double equals sign == is called the equality operator. It compares two things to see if they are equal. Be careful not to confuse this with the asignment operator, which uses only a single equals sign =.


This is called an if/else statement, and it's a variation on the if statement. The way it works is that the condition side == 1 is checked, and if it's true, then the code under the if line will run; but if the condition is false, the code under the else line will run instead.

You can think of this as saying, "If side is 1, then set the color to blue; otherwise, set the color to yellow."

You will see a lot of if/else statements as you continue coding.

Example of an if..else statement 
 import turtle
jack = turtle.Turtle()
jack.width(5)

for side in range(4):
    if side == 1:
        jack.color("blue")
    else:
        jack.color("yellow")
    jack.forward(100)
    jack.right(90)

    MODULO Operators
    he modulo operator, %, divides one number by another—and then gives the remainder of that division.
    -Used for repetitive parterns
    -use it with an increasing sequence of numbers
     Example of a modulor with if statements to draw a pentagon with three colors
        import turtle

t = turtle.Turtle()
t.width(5)

for n in range(12):
    t.color("gray")
    if n % 3 == 0:
        t.color("red")
    if n % 3 == 1:
        t.color("orange")
    if n % 3 == 2:
        t.color("yellow")
    t.forward(50)
    t.right(360/12)

return statement- any value inside a local variable.


 
A function definition can have any number of return statements, but it will stop after the first one. For example, we can write a function like this:

def favorite_color():
    return "green"
    return "big scary monster"
    return 42
    return [1, "line", 2]


Key concept: 
When we call a function from inside a loop, we can use the loop variable as input for that function. This allows us to call the same function repeatedly, but pass it a different input each time.


he rules
Before you start coding, let's make sure the basic idea of Fizz Buzz is clear. You count up through a series of numbers (0, 1, 2, 3, 4, 5 ... ) and for each number:

If the number is evenly divisible by 3, you say "Fizz"
If the number is evenly divisible by 5, you say "Buzz"
If the number is evenly divisible by both 3 and 5, you say "FizzBuzz"

RANDOM MODULE
a deterministic program is a program that always produces the same output when given the same in[until]

random.choice (used in lists)
Here's an example of using random.choice:

color = random.choice(["red", "green", "blue"])
To use the function, we simply call it and pass it a list—in this case, a list of colors. The function then returns a random item from the list. If we want to capture that returned value, we can assign it to a variable, like with color, above.



random.randint
randint stands for "random integer", because that's exactly what it does—it returns a random integer. Here's an example:

die_roll = random.randint(1, 6)
As you can see, the function takes two arguments: the lower and upper bounds. It will then return a number at random from within that range. The function call above will generate a random number from 1 through 6—just like rolling a six-sided die.





Comparison operators
You've been using the equality operator == with if statements, to do things like:

if side == 2:
    jack.color("blue")
The == operator compares two things (to see if they are equal), so for that reason we would say it is an example of a comparison operator. And Python has several other comparison operators that we haven't yet used. Let's check them out:

Operation	What it means
a == b	Is a equal to b?
a < b	Is a less than b?
a > b	Is a greater than b?
a <= b	Is a less than or equal to b?
a >= b	Is a greater than or equal to b?
a != b	Is a not equal to b?
All of these can be used in an if statement.

elif- tests to be link up as c ompound statement.
if else- use when you wnat to test each and very statement independently.

mood = "happy"

import turtle
riley = turtle.Turtle()
riley.width(5)

# Add your code here.
if mood == "happy":
    riley.color("yellow")
elif mood == "sad":
    riley.color("blue")
else:
    riley.color("gray")

for side in range(5):
    riley.forward(100)
    riley.right(144)



    using or negations in python

    import turtle

t = turtle.Turtle()
t.color("lime")
t.width(3)
t.penup()
t.shape("turtle")

for step in range(2000):
    t.forward(1)
    # Add your code here
    
    if t.xcor() <-180 or t.xcor() >180:
       t.right(180)