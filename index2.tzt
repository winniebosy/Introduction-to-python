Statements in Python
A statement is a piece of ocde that provides a complete instruction for some action that python will carry out.
- CLassification of Pyhton Statements:
   -Simple Statements eg import or assignemet statements
   -Compund Statements- Statements that contain other statements. eg compound statements. Used to control whetehr the code runs, when the code runs
          and how may times the code runs.
-Control flow: the order in which statements are executed in a pience of code.


The Range Function
range is a powerful function in py. Used to proive a range of numbers. Example
  
  for side in [0, 1, 2, 3]:
    amy.forward(100)
    amy.left(90)
We can replace the list like this:

for side in range(4):
    amy.forward(100)
    amy.left(90)


CRUNCHING NUMBERS 

An expression is a piece of code that resolves to some value. Within an expression, there are operators and operands.
Operators indicate what operation is to be performed (such as addition or subtraction).
Operands are the numbers (or other values) on which we want to perform the operations.


Function
A function is named block of code that doesn't run until we tell it to run.
A function call is a statement that makes a function run; when we run a statement like this, we would say that we are "calling the function".
An argument is a value that we can pass to a function when we call it.
 
Method:
-This is a function that is associated with a particular object
-Subset of a function.
-Methods can be used to give behaviors objects. eg amy.forward(100)
- all methods are functions, but not all functions are methods.


DEFINING functions
 first line of function in python starts with def keyword, then name of the fucntion and parenthesis.

 eg def spiral():

 PARAMETERS AND ARGUMENTS
pARAMETERS- FUNCTION DEFINIIONS. variable part of the function definition.
 parameter isn't anything fancy—it's really just a variable. 
Example of parameters: def spiral(sides, turn, color, width):
Example of arguements: spiral(150, -30, "blue", 10)
Arguments are just inputs
An argument isn't anything fancy either—it's just some input that we pass to a function.

When we call a function, we pass it some inputs (usually called arguments)—and these inputs get assigned to variables that are in the definition of that function (usually called parameters).


FUNCTION SCOPE
The scope of a variable is simply the part of the code for which that variable is defined.
 variable that is defined inside a function can only be used inside of that function. We would say a variable like this has local scope or is a local variable.
 In contrast, a variable that is defined outside of a function can be used anywhere in the file (both inside of functions and outside of functions). We would say a variable like this has global scope or is a global variable.

 INDENTATION
 ndent with care!
Python uses the indentation of your code to determine its structure. For example, there's a big difference between these two blocks of code:

for side in [25, 50, 25, 50]:
    t.forward(side)
    t.right(90)
for side in [25, 50, 25, 50]:
    t.forward(side)
t.right(90)
The difference is in whether the line t.right(90) is part of the loop or not. In the first case, it is; so the turtle will draw a rectangle. In the second case, it isn't; so the turtle will just keep going forward four times and only turn right at the very end.

CONDITIONAL STATEMENTS IN Python
A conditional statement is one that that tells Python to run some code only when a certain condition is true. We can use the if keyword to create a conditional statement, like this:

if sides == 4:
    bob.color("purple")
The double equals sign == is called the equality operator. It compares two things to see if they are equal. Be careful not to confuse this with the asignment operator, which uses only a single equals sign =.


This is called an if/else statement, and it's a variation on the if statement. The way it works is that the condition side == 1 is checked, and if it's true, then the code under the if line will run; but if the condition is false, the code under the else line will run instead.

You can think of this as saying, "If side is 1, then set the color to blue; otherwise, set the color to yellow."

You will see a lot of if/else statements as you continue coding.

Example of an if..else statement 
 import turtle
jack = turtle.Turtle()
jack.width(5)

for side in range(4):
    if side == 1:
        jack.color("blue")
    else:
        jack.color("yellow")
    jack.forward(100)
    jack.right(90)

    MODULO Operators
    he modulo operator, %, divides one number by another—and then gives the remainder of that division.
    -Used for repetitive parterns
    -use it with an increasing sequence of numbers
     Example of a modulor with if statements to draw a pentagon with three colors
        import turtle

t = turtle.Turtle()
t.width(5)

for n in range(12):
    t.color("gray")
    if n % 3 == 0:
        t.color("red")
    if n % 3 == 1:
        t.color("orange")
    if n % 3 == 2:
        t.color("yellow")
    t.forward(50)
    t.right(360/12)

return statement- any value inside a local variable.


 
A function definition can have any number of return statements, but it will stop after the first one. For example, we can write a function like this:

def favorite_color():
    return "green"
    return "big scary monster"
    return 42
    return [1, "line", 2]


Key concept: 
When we call a function from inside a loop, we can use the loop variable as input for that function. This allows us to call the same function repeatedly, but pass it a different input each time.


he rules
Before you start coding, let's make sure the basic idea of Fizz Buzz is clear. You count up through a series of numbers (0, 1, 2, 3, 4, 5 ... ) and for each number:

If the number is evenly divisible by 3, you say "Fizz"
If the number is evenly divisible by 5, you say "Buzz"
If the number is evenly divisible by both 3 and 5, you say "FizzBuzz"

RANDOM MODULE
a deterministic program is a program that always produces the same output when given the same in[until]

random.choice (used in lists)
Here's an example of using random.choice:

color = random.choice(["red", "green", "blue"])
To use the function, we simply call it and pass it a list—in this case, a list of colors. The function then returns a random item from the list. If we want to capture that returned value, we can assign it to a variable, like with color, above.



random.randint
randint stands for "random integer", because that's exactly what it does—it returns a random integer. Here's an example:

die_roll = random.randint(1, 6)
As you can see, the function takes two arguments: the lower and upper bounds. It will then return a number at random from within that range. The function call above will generate a random number from 1 through 6—just like rolling a six-sided die.





Comparison operators
You've been using the equality operator == with if statements, to do things like:

if side == 2:
    jack.color("blue")
The == operator compares two things (to see if they are equal), so for that reason we would say it is an example of a comparison operator. And Python has several other comparison operators that we haven't yet used. Let's check them out:

Operation	What it means
a == b	Is a equal to b?
a < b	Is a less than b?
a > b	Is a greater than b?
a <= b	Is a less than or equal to b?
a >= b	Is a greater than or equal to b?
a != b	Is a not equal to b?
All of these can be used in an if statement.

elif- tests to be link up as c ompound statement.
if else- use when you wnat to test each and very statement independently.

mood = "happy"

import turtle
riley = turtle.Turtle()
riley.width(5)

# Add your code here.
if mood == "happy":
    riley.color("yellow")
elif mood == "sad":
    riley.color("blue")
else:
    riley.color("gray")

for side in range(5):
    riley.forward(100)
    riley.right(144)



    using or negations in python

    import turtle

t = turtle.Turtle()
t.color("lime")
t.width(3)
t.penup()
t.shape("turtle")

for step in range(2000):
    t.forward(1)
    # Add your code here
    
    if t.xcor() <-180 or t.xcor() >180:
       t.right(180)



       SHELL
A shell is simply the outermost layer of an operating system. It's designed to provide a way for you to interact with the tools and services that your operating system provides.
The examples above are what we call graphical shells, where you interact with the operating system through things like windows and buttons. You may have heard this type of interface called a Graphical User Interface or GUI (pronounced "gooey").
In contrast, this course is all about how to use your computer's text shell. Instead of clicking on buttons, you'll be entering text commands. This type of interface is called a Command-Line Interface or CLI.
BASH
We've been saying "the shell," but there isn't just one single shell that all systems use—there are a variety of shells out there, and different operating systems may use different shells.

One of the most widely used shells is called BASH, and that's what we'll be using in this course. Mac and Linux computers use the BASH shell by default. Windows computers don't, but it's pretty easy to get one installed.


Echo is used to display content in python just like console.log is used in js
cd.. - go back to one directory
ls- lists items in a directory
ls.. lists the contents in the directory



n the video, Karl mentioned the home directory. On your computer, the home directory is the current user's top-level directory. It's usually called something like:

/Users/karl



The directory you're currently inside.-working directory(use one dot)


The directory immediately above your current directory.- parent directory 9use two dots)


The current user's top-level directory (the directory that has all of that user's other directories inside of it).-home directory (~)

You can use pwd to show the current working directory.

ome shell commands support options or flags that can be used to turn on extra behavior or special features.

We can add an option to a command by typing a hyphen followed by a particular letter. For example, when using the ls command, we can add the handy -l option, as in ls -l.


To list items that end with a .txt:  ls *.txt
To list items that start with a particular letter or name : ls bear*
To list the size of a file - ls -l
To find a lsit of items with similar middle name s- use ls *x*


To move one file from one directory to another, you need to specify the directory you ae moving the file from to the final desitnation. eg 
mv *.jpg Photos- this moves from the current directory to the photos directory.

The curl command can be used to download a file from the Web. By default, it will download the file and display the contents in the terminal. For example:

curl 'http://www.google.com'

If you add the -L option to curl, it will first follow any redirects, and then download the file from wherever the redirects ultimately go. In other words, if you enter:


if you want to view the contents of a particualr downloaded item on the intenrnet:
 you use cat for contacteneate. eg cat dictonary.txt


 The limitation is that files often have more text than will fit on the screen at once. When that's the case, you can use less, as in:

less dictionary.txt

rm and rmdir commands permanently delete files. So if you try these commands on your own computer please do be careful not to delete something important!


If you want to delete multiple files or directories, you can simply list them after the command, with each one separated by a space. Like this:

rmdir example1 example2 example3
Also, notice how the shell uses a space to tell where one item ends and the next begins. If the name of a file or directory has a space in it, you'll need to put the whole name in single quotes. Like this:

rmdir 'example 1'  'example 2'  'example 3'




Permanently delete a file named example without double-checking.-rm example3


Permanently delete a file named example, but double-check first. rm -i example


Permanently delete a directory named example. rmdir example




Lesson Recap
You really have learned a lot in the lesson—in total, you learned how to:

Open a terminal or Command-Line Interface (CLI)
Use basic shell commands like echo
Use variables in the shell
Navigate directories (folders) using cd
Use options with your shell commands
Organize your files and directories with mkdir and mv
Download files with curl
View files using cat and less
Remove files and directories with rm and rmdir
You now have all the shell and command-line fundamentals you need to run programs, navigate your computer, and carry out all sorts of other tasks—all without having to touch your graphical user interface!



Lesson Recap
For your reference, here's a brief recap of the specific topics we covered in this lesson. If you followed along with everything, you now know how to:

Open a terminal or Command-Line Interface (CLI)
Use basic shell commands like echo
Use variables in the shell
Navigate directories (folders) using cd
Use options with your shell commands
Organize your files and directories with mkdir and mv
Download files with curl
View files using cat and less
Remove files and directories with rm and rmdir




RUNNING Python
USE THe command winpty python to run python in windows environment
When you see the >>> prompt like this, it means Python is currently running! While Python is running like this, you won't be able to enter Git Bash commands. To exit Python, you can type in exit() and press enter—and this will return you to Git Bash.
reating an Alias
Typing winpty over and over does work, but it can be a nuisance, so we recommend that you create something called an alias. That looks like this:

alias python='winpty python'
If you run this line in Git Bash, then for the rest of the current session (meaning, until you restart Git Bash), you will then be able to enter simply python and Git Bash will know that you really mean winpty python.

Making a Permanent Alias
If you want to avoid creating the alias every time you restart Git Bash, you can make the change permanent by running the following line in Git Bash:

echo "alias python='winpty python.exe'" >> ~/.bashrc

So the above line simply adds the line alias python='winpty python.exe' to the .bashrc file, which means that this command will get run (and the alias will be created) every time you open Git Bash.

Once you have created this permanent alieas, you should be all set and be able to run Python as shown throughout the rest of the course.


nput and print are examples of what we would call built-in functions—that is, they are functions that are built into Python. In practical terms, this means that when you install Python, the code for these functions comes with it.

The thinking is that since pretty much everyone who uses Python needs to be able to get input and print things, it makes sense to have these functions already defined and provided as part of the language.

Programming languages often come with a whole set of such built-in functions, in order to make it easier to do things that you would commonly want to 


PYTHON INTERPRETER
You'll often see Python's interactive mode called "the interactive mode of the interpreter" or simply "the interpreter". Why? Because when you're running interactive mode, that's what you're interacting with!

We haven't talked about this, but the Python interpreter is the thing that actually reads and runs your code. So when you're in interactive mode, you're interacting with the interpreter.

In practical terms, you'll most often hear programming tutorials say things like "open up the Python interpreter" or "give this code a try in the interpreter". When you see that, don't get confused—they're usually just referring to interactive mode.



one is Python’s way of indicating that there was no value—in this case, because the more_confused function did not return one.


Anytime you enter a statement or expression, interactive mode will display the returned value. This lets you get a little more insight into what's happening with your code.

However, this behavior can be a bit confusing when you are also using print at the same time. As an example, let's define the confuse function (that we used earlier) in interactive mode.



We call things like + and / "operators" because they performs operations on the numbers.

And "operand" means the thing on which the operations are performed—in this case, the numbers.



TYPE ERRORS

A type error is simply an error that involves the type of data being manipulated. In other words, it happens when the code is trying to do something with an object, but there’s a problem with the data type of that object.


IMPORTING MODULES
We have to use dot notation to indicate that the function we're calling is in the chance or whatever python module.

Notice that this is the same as when we call methods from the random module. We can't just type choice() or randint()—we have to specify random.choice() and random.randint().

This is called dot notation. The period . is used to say where something is located. So a line like chance.die_roll() is saying "call the die_roll() function, which is located inside the chance module."
