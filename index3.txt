STRINGS AND LISTS

if you a assign a string to a string in python, yiu get a syntax error that cannot assign literal
Variable name is also known as identifier. eg sides-10- sides is identifier.
Binds- sides-10; sides is bound to 10, amy is bound to turtle.
literal- directly represent that data type.


COMPLEX STRINGS
Triple quotes """ used in the begging and end of very long STRINGS
ingle quotes to surround the whole string
The escape character \ to take care of the single quotes that are inside the string
The newline character \n to break the story to multiple lines
in summary, we can use the len function to find out how long a string is (i.e., how many characters the string has). We simply call the len function and pass it the string we want to check:

>>> len("Python")



We can also use the len function on lists:

>>> len([1, 2, 3])
3


n = n + 1
The key thing to understand is that the code on the right side of the assignment operator, =, runs first. So Python first evaluates n + 1. We assigned n a value of 1, so n + 1 is equivalent to 1 + 1, or 2.

It then assigns the 2 as the new value of n: wnere n=2


Example of code on how to count character increments in python. The initial value will be outside the four loops
count= 0
for ch in "bonobos":
    if ch == "o":
        count = count + 1
print(count)

FINDING THE NUMBER OF CHARACTERS IN A PARTICUALR STRINGS
def count_character(string, target):

  count = 0

  for ch in string :
       if ch == target:
         count = count + 1
        
  return count


  Indexing
We've seen that lists and strings have some things in common. Strings and lists both:

Have a length.
Are sequences.
Can be looped over.

Note that indexes start at 0, not 1. So the first item in a sequence would have an index of 0, while the second would have an index of 1, the third an index of 2, and so on.

INDEXING IS USED TO ASSESS WHETHER A PARTICUALR STRING STARTS WITH A PARTICUALR CHARACTER.


what the three range parameters do:

The first parameter is the number to start with.
The second parameter is the number to stop at (or rather, to stop before, since it's excluded).
The third parameter is the step size (i.e., how large a step to take when counting up).


range(len(word)) does? It gives us a sequence of numbers that is exactly the same as the index numbers for the string. In other words, it gives us a way to loop over the index numbers of a string. This may not seem useful yet, but we will put it to use later in this lesson!

-Looping over index positions of characters must have the len keyword.
example
word = "happy"
>>> for n in range(len(word)):
...    print(n, word[n])

As you saw above, the IndexError message happens when you're trying to use an index to access a particular item, but there is no item with that index. In the above case, the code tries to access the character at index 0, but there's no character with that index.

SLICE STRING
example  "abcdefgh"[1:5]
'bcde'-Slicing in python will include the the slicing of the fist posiition but not including the slicing up to the second position.
-It also does not return an error when the slice is longer than the total length of the string.

No Index Errors with slice operations
Slice operations never cause IndexError. A slice that tries to extract characters off of the end of the string, will instead just return as much as it can get, even if that's nothing at all —

>>> "presto"[1024:4096]
''
This expression is asking for the characters from position 1024 to 4096 of a string that only has six characters. This definitely seems like the kind of thing that would give an Index Error, but Python just returns whatever it can get. In this case, it can't get anything at those locations, so it simply returns an empty string.

CONCATENATING
Putting strings together. In oython, you cannot add different data types.
Example
Write a function called adverbly that takes a string as input and returns that string with "ly" appended to it.
  
def adverbly(string):
    return string + 'ly'

print(adverbly("quick"))




f-strings- this is simialr to tempelate literals or interpolation in javascript.
In this next video, Karl will introduce the formatted string literal or f-string for short. The f-string is something that was added to Python in version 3.6—so in order for this to work on your own computer,
Basic f-string Syntax
To use an f-string, we simply put f at the beginning of the string (before the quotes "") and then we can insert variable names within curly braces {} inside the string itself.

Here's a simple example:

>>> name = "Karl"
>>> f"Hello {name}!"
'Hello Karl!'
 Example 2:
 >>> import math
>>> f"pi is about {math.pi:.6}"
'pi is about 3.14159'
 

 Strings to Numbers to Strings
 Results in a python is always in a string.
 We can use the int function to convert a string to an integer:

>>> int("2")
2

And similarly, we can use the str function to convert an integer to a string:

>>> str(2)
'2'

n this next exercise, your goal is to write a program that asks the user for three numbers, adds those numbers up, and then prints a message saying what the sum is. Like this:

Enter a number: 2
Enter another number: 1
Enter a third number: 3
2 + 1 + 3 = 6

solution
num1 = int(input('Enter a number:'))
print(num1)
num2 = int(input('Enter a second number:'))
print(num2)
num3 = int(input('Enter a third number:'))
print(num3)
results = num1 + num2 + num3
print(f"The total is {results}")

starts_with 

Example
define a function, starts_with, that takes two strings and compares the first character.

def starts_with(stringOne,stringTwo):
    if stringOne[0]==stringTwo[0]: 
        return True
    else:
        return False
# A call like this should return True:
print(starts_with("banana", "bread"))

# And one like this should return False:
print(starts_with("zebonkey", "kiwi"))


Write a function called starts_with that takes two strings as arguments, and returns True if the first string starts with the second string, and False otherwise.
solution
def starts_with(long, short):
    for position in range(len(short)):
        if long[position] != short[position]:
            return False
    return True

USING Slicing
Now, give it a try! See if you can write an alternative version of the starts_with function that uses string slicing.
# Write your function definition here.
def starts_with(long,short):
    if long[0:len(short)]==short:
        return True
    else:
        return False
    
# A call like this should return True:
print(starts_with("apple", "app"))

# And one like this should return False:
print(starts_with("manatee", "mango"))

STRING METHODS
Avoid using variables that are only used once
ef starts_with_v3(long, short):
    return long[0:len(short)] == short

But checking if one string starts with another is pretty common in programming, so Python actually comes with the feature built in!

Specifically, it is available as a built-in method called startswith. Remember, a method is simply a function that is associated with a specific objec()
>>> "banana".startswith("ban")
True
>>> "bonobo".startswith("ban")
False

Many string methods, like startswith and endswith, are predicates — which means that they return True or False to indicate something about the string.

Example 3
def possible_tag(word):
    if word.startswith("<") and word.endswith(">"):
        print(word, "could maybe be an HTML tag")
    else:
        print(word, "is definitely not an HTML tag (but might contain one)")

Many web services want users to have passwords that are at least eight characters long, but it can be a problem if passwords are too long. Your goal will be to write a function that checks any given string to see if it's a good length.
solution
def good_length(s):
    return len(s) > 7 and len(s) < 65



    LISTS LISTS LISTS

    Strings and lists are sequences
Strings and lists have something important in common: They are both sequence types. That is, they're both data types that represent a sequence of values, not just a single value.

With a string, the values are the individual characters; with a list, they can be just about anything. But in both cases, there's a set of items, and the items have index numbers to identify the sequence in which they're ordered.

Here are some things that actually work on all sequence types:

the indexing operation
the slicing operation
the len function



In the workspace below, see if you can write a function called total_length that does exactly that. 
The total_length function should take a list of strings and return the sum of the lengths of all the strings in that list. 
For instance —

solution
def total_length(a):
    count=0
    for string in a:
        count = count + len(a)
    return count

Methods on Lists [].

These method modify lists but do not return values.
A little earlier, we explored string methods. On this page, we'll explore several different list methods.

Appending words(end of list)
Inserts anew element to end of a list
words = ["echidna", "dingo", "crocodile", "bunyip"]
>>> words.append("platypus")
>>> words
['echidna', 'dingo', 'crocodile', 'bunyip', 'platypus']

Extending:
The extend keyword adds possibly several items to the end of the list.
Modifies al list and copies another list and inserting its items at the end.Treasts a string as a list of individual characters.
Used mainly to append a list.
 words.extend(["Kangaroo","WALLABY"]) 
>>> words
['echidna', 'dingo', 'crocodile', 'bunyip', 'platypus', 'a', 'b', 'c', 'Kangaroo', 'WALLABY']
extend keyword extends words at the end of the lsit.

Reverse
The reverse method reverses word in a string. 
The last item in a string becomes first.
words
['WALLABY', 'Kangaroo', 'c', 'b', 'a', 'platypus', 'bunyip', 'crocodile', 'dingo', 'echidna']


SORT METHODS
it sorts words in a list to an alphabetical order.

Mutable vs Immutable
You can modify a list but you cannnot change a list. 
The list you can do is change the string.
mutable:changeable eg string
immutable:unchangeable eg lists
